# -*- coding: utf-8 -*-
"""Part2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oOVO_XiSFCUaet8ZWcLcc0mfIUUp7xpx
"""

import numpy as np
import pandas as pd
import seaborn as sns
import os
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('/content/final_cleaned_reviews.csv')

def calculate_correlation(df, col1, col2):
#Calculate the correlation coefficient between two columns in a DataFrame.
# Parameters: df (DataFrame): The input DataFrame.
#col1 (str): The name of the first column.
# co12 (str): The name of the second column.
# Returns:
# float: The correlation coefficient.
    correlation = df[col1].corr(df[col2])
    return correlation

# Calculate the correlation between 'helpful_count' and 'rating'
correlation = calculate_correlation(df, 'helpful_count', 'rating')
print(f'The correlation between helpful_count and rating is: {correlation}')

'''
Observation
A correlation of -0.077 suggests a very weak negative correlation between the
'helpful_count' and 'rating' columns in your dataframe. This means that as the
'helpful_count' increases, the 'rating' tends to decrease slightly, but the
relationship is very weak and might not be practically significant.
'''

!pip install scipy
import scipy.stats

def calculate_skewness_kurtosis(df, col):
    """
    Calculate the skewness and kurtosis of a column in a DataFrame.

    Parameters:
    df (DataFrame): The input DataFrame.
    col (str): The name of the column.

    Returns:
    tuple: A tuple containing skewness and kurtosis.
    """
    col_data = df[col].dropna()  # Drop missing values for accurate calculation
    skewness = scipy.stats.skew(col_data) # Use scipy.stats.skew to calculate skewness
    kurt = scipy.stats.kurtosis(col_data) # Use scipy.stats.kurtosis to calculate kurtosis
    return (skewness, kurt)

# Calculate the skewness and kurtosis for the 'rating' column
skewness, kurt = calculate_skewness_kurtosis(df, 'rating')
print(f'Skewness: {skewness}, Kurtosis: {kurt}')

'''
The analysis of the 'rating' data reveals a non-normal distribution with a
negative skew of -1.925 and a high kurtosis of 4.155. This indicates that most
ratings are clustered towards the higher end of the scale, with a few extreme
low ratings creating a longer left tail. The high kurtosis further emphasizes
a concentration of ratings around the average with a higher probability of
outliers on both ends. These findings suggest potential biases in rating
collection and necessitate the consideration of non-parametric statistical
methods for further analysis.
'''

from textblob import TextBlob

def sentiment_analysis_summary(df, text_col):
    """
    Perform sentiment analysis on text data and return the counts of positive, negative,
    and neutral reviews.

    Parameters:
    df (DataFrame): The input DataFrame.
    text_col (str): The name of the column containing text data.

    Returns:
    dict: A dictionary with counts of positive, negative, and neutral reviews.
    """
    sentiment_counts = {'positive': 0, 'negative': 0, 'neutral': 0}

    for text in df[text_col]:
        blob = TextBlob(str(text))  # Convert text to TextBlob object
        sentiment = blob.sentiment.polarity

        if sentiment > 0:
            sentiment_counts['positive'] += 1
        elif sentiment < 0:
            sentiment_counts['negative'] += 1
        else:
            sentiment_counts['neutral'] += 1

    return sentiment_counts

counts = sentiment_analysis_summary(df, 'content')
print(counts)

"""
According to the sentiment analysis, there are 1012 positive reviews,
38 'negative', and 47 neutral reviews.
"""