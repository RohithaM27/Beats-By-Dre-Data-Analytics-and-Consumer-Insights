# -*- coding: utf-8 -*-
"""Part1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LmZT_3SozXwDd11y37s23MR53hM4hpxU
"""

import numpy as np
import pandas as pd
import seaborn as sns
import os
import seaborn as sns
import matplotlib.pyplot as plt

"""#Initial EDA with Pandas: Load your dataset. • Display the first few rows. • Provide descriptive statistics (mean, median, mode, variance, standard deviation). • Identify and handle missing values. • Check for duplicates and remove them if necessary."""

df = pd.read_csv('/content/final_cleaned_reviews.csv')

#displaying first five rows
df.head()

df = df.iloc[:-100]

df

# Providing descriptive statistics (mean, median, mode, variance, standard deviation).
df.describe()

#the dataset loaded in this colab is cleaned and all the null values are removed

"""#Data Visualization: Create various plots (histograms, box plots, scatter plots, heatmaps) to visualize the data distribution and relationships. • Use Matplotlib and Seaborn for creating these visualizations."""

##To visualize the distribution of ratings for each product in the dataset
sns.catplot(x='rating', kind='count', col='Product_name', data=df, col_wrap=5,height=3, aspect=1)
plt.xlabel("Rating")
plt.ylabel("Count")
plt.suptitle('Distribution of Ratings by Product', y=1.03)
plt.show()
plt.show()

#observation:
# looks like most of the ratings are between 4 and 5 overall, but brands like 'Beats Studio 3', 'Bose', 'Skullcandy', 'Bluedee' have the rating of 5 with highest count around 80

# boxplot that visually displays the distribution of your ratings, including the median, quartiles, and potential outliers.
sns.boxplot(x='rating', data=df)
plt.xlabel('Rating')
plt.title('Boxplot of Ratings')
plt.show()

#Observatiosn:
#The outliers are at 1.0 and 2.0 ratings overall. The median is 4.5. 4.0 is the lower quartile and 5.0 is the upper quartile above.

# Product color popularity : bar plot showing the count of reviews for each product color
import seaborn as sns
import matplotlib.pyplot as plt

sns.countplot(x='product_color', data=df)
plt.xlabel('Product Color')
plt.ylabel('Count of Reviews')
plt.title('Count of Reviews for Each Product Color')
plt.xticks(rotation=90, ha='right')  # Rotate x-axis labels for readability if needed
plt.tight_layout()  # Adjust layout to prevent labels from overlapping
plt.show()

#Observations: according to the visuals, black color products recieved the most number of reviews.

plt.figure(figsize=(8, 6))  # Set figure size before plotting
sns.boxplot(x='rating', y='Product_name', data=df)
plt.title('Distribution of Ratings')
plt.xlabel('Rating')
plt.ylabel('Product Name')
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Create a grouped bar plot
sns.countplot(x='Product_name', hue='rating', data=df,  palette='Reds')
plt.xlabel('Product_name')
plt.ylabel('Count')
plt.title('Value Counts of Sound Ratings by Brand')
plt.xticks(rotation=90, ha='right')  # Rotate x-axis labels for readability if needed
plt.tight_layout()  # Adjust layout to prevent labels from overlapping
plt.legend(title='Sound Rating', loc = 'upper left')
plt.show()

# Select the product names you want to include
selected_products = ['Beats Studio 3', 'Bose', 'Skullcandy','Bluedee', 'Apple AirPods Max', 'Raycon']

# Filter the DataFrame for selected products
filtered_df = df[df['Product_name'].isin(selected_products)]




# Create a grouped bar plot
sns.countplot(x='Product_name', hue='rating', data=filtered_df,  palette='Reds')
plt.xlabel('Product_name')
plt.ylabel('Count')
plt.title('Value Counts of Sound Ratings by Brand')
plt.xticks(rotation=90, ha='right')  # Rotate x-axis labels for readability if needed
plt.tight_layout()  # Adjust layout to prevent labels from overlapping
plt.legend(title='Sound Rating', loc = 'upper left')
plt.show()

selected_products = ['Beats Studio 3', 'Bose', 'Skullcandy','Sony', 'Apple Airpods Max', 'Sennheiser', 'JBL Tune 660NC']
filtered_df = df[df['Product_name'].isin(selected_products)]

sns.countplot(x='Product_name', hue='rating', data=filtered_df,  palette='Reds')
plt.xlabel('Product_name')
plt.ylabel('Count')
plt.title('Value Counts of Sound Ratings by Brand')
plt.xticks(rotation=90, ha='right')  # Rotate x-axis labels for readability if needed
plt.tight_layout()
plt.legend(title='Sound Rating', loc = 'upper left')
plt.show()

#I beleive that apple airpods are not included in this hightly rated list because their expenisive proce regardless of their popularity.

"""#Sentiment Analysis using TextBlob: Perform sentiment analysis on the text reviews. • Classify the reviews into positive, negative, and neutral sentiments. • Aggregate the sentiment scores to assess overall consumer sentiment."""

!pip install nltk
!pip install textblob

from textblob import TextBlob

# contents extracted into a list called 'review_contents'
review_contents = df['content'].head(100).tolist()

def perform_sentiment_analysis(reviews):
  sentiments = []
  for review in reviews:
    analysis = TextBlob(review)
    polarity = analysis.sentiment.polarity
    if polarity > 0:
      sentiment = 'positive'
    elif polarity < 0:
      sentiment = 'negative'
    else:
      sentiment = 'neutral'
    sentiments.append(sentiment)
  return sentiments

# Example usage:
sentiments = perform_sentiment_analysis(review_contents)
sentiment_counts = pd.Series(sentiments).value_counts()
print(sentiment_counts)

# Calculate average polarity for overall sentiment
average_polarity = sum([TextBlob(review).sentiment.polarity for review in review_contents]) / len(review_contents)
if average_polarity > 0:
  overall_sentiment = 'positive'
elif average_polarity < 0:
  overall_sentiment = 'negative'
else:
  overall_sentiment = 'neutral'
print("Overall sentiment:", overall_sentiment)

def categorize_sentiments(reviews):
  positive_reviews = []
  negative_reviews = []
  neutral_reviews = []
  for review in reviews:
    analysis = TextBlob(review)
    polarity = analysis.sentiment.polarity
    if polarity > 0:
      positive_reviews.append(review)
    elif polarity < 0:
      negative_reviews.append(review)
  return positive_reviews, negative_reviews

positive_reviews, negative_reviews = categorize_sentiments(review_contents)

!pip install wordcloud
from wordcloud import WordCloud

def generate_wordcloud(text_list, title):
  # Combine all text into a single string
  all_text = ' '.join(text_list)

  # Generate word cloud
  wordcloud = WordCloud(width=800, height=400, background_color='white', colormap = 'Reds').generate(all_text)

  # Display word cloud
  plt.figure(figsize=(10, 5))
  plt.imshow(wordcloud, interpolation='bilinear')
  plt.axis('off')
  plt.title(title)
  plt.show()

generate_wordcloud(positive_reviews, 'Word Cloud of Positive Reviews')
generate_wordcloud(negative_reviews, 'Word Cloud of Negative Reviews')

df.head()

#To track the average rating for Beats headphones and its competitors over time, you would need a time variable in your dataset. Assuming you have a 'date' column, you can use the following code:
# Convert the 'date' column to datetime objects if it's not already
df['date'] = pd.to_datetime(df['date'])

# Select the product names you want to include
selected_products = ['Beats Studio 3', 'Bose', 'Skullcandy','Bluedee']

# Filter the DataFrame for selected products
filtered_df = df[df['Product_name'].isin(selected_products)]

# Group by product name and time period (e.g., month) and calculate the average rating
average_ratings_over_time = filtered_df.groupby(['Product_name', pd.Grouper(key='date', freq='M')])['rating'].mean().reset_index()

# Plot the average ratings over time
plt.figure(figsize=(12, 6))
sns.lineplot(x='date', y='rating', hue='Product_name', data=average_ratings_over_time)
plt.xlabel('Date')
plt.ylabel('Average Rating')
plt.title('Average Rating of Selected Products Over Time')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

selected_products = ['Beats Studio 3', 'Bose', 'Skullcandy','Bluedee']
filtered_df = df[df['Product_name'].isin(selected_products)]

product_popularity = filtered_df.groupby('Product_name')['helpful_votes'].sum().reset_index(name='Total Helpful Votes')

plt.figure(figsize=(10, 6))
sns.barplot(x='Product_name', y='Count', data=product_popularity)
plt.xlabel('Product Name')
plt.ylabel('Number of Reviews')
plt.title('Popularity Comparison')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()



# Assuming 'sentiments' list contains sentiment labels for each review
df['sentiment'] = perform_sentiment_analysis(df['content'])

# Group by brand and sentiment, count reviews
sentiment_counts = df.groupby(['Product_name', 'sentiment'])['content'].count().unstack(fill_value=0)

# Select brands for comparison
selected_brands = ['Beats Studio 3', 'Bose', 'Skullcandy','Sony', 'Apple Airpods Max', 'Sennheiser', 'JBL Tune 660NC']  # Replace with actual brand names
sentiment_counts = sentiment_counts.loc[selected_brands]

# Plot stacked bar chart
colors =['#d90429', '#ef233c', '#ed6a5a']
sentiment_counts.plot(kind='bar', stacked=True, color = colors)
plt.xlabel('Brand')
plt.ylabel('Number of Reviews')
plt.title('Sentiment Distribution for Beats and Competitors')
plt.legend(title='Sentiment')
plt.show()

# # Word cloud of review text
# from wordcloud import WordCloud

# # Combine all review text into a single string
# all_reviews = ' '.join(df['content'].dropna())

# # Generate word cloud
# wordcloud = WordCloud(width=800, height=400, background_color='white').generate(all_reviews)

# # Display word cloud
# plt.figure(figsize=(10, 5))
# plt.imshow(wordcloud, interpolation='bilinear')
# plt.axis('off')
# plt.title('Word Cloud of Description Text')
# plt.show()

"""#Conclusion: Summarize your findings from the EDA and sentiment analysis. • Provide insights and potential implications for Beats by Dre based on the analyzed data.

EDA Findings:
Most ratings are between 4 and 5 stars, indicating general customer satisfaction.
Specific products like 'Beats Studio 3', 'Bose', 'Skullcandy', 'Bluedee' have a high concentration of 5-star ratings.
Outliers exist at the lower end (1 and 2-star ratings).
Black is the most popular product color based on review count.\

Sentiment Analysis Findings:
The overall sentiment towards Beats products is positive.
Word clouds highlight terms like "great," "good," and "comfortable" associated with positive reviews.
Negative reviews often mention issues like "sound quality," "price," and "battery."

Potential Implications for Beats by Dre:
- Leverage the popularity of high-rated products in marketing efforts.
- Investigate reasons for low ratings and address concerns to improve customer satisfaction.
- Consider black's popularity when launching new products or promotions.
- Emphasize features and qualities frequently mentioned in positive reviews.
- Address common complaints (e.g., sound quality, price) through product improvements or targeted messaging.

** Personally, I beleive Beats headphones are one of the most popular brands in the market,
 and they are preferred by the customers becuase of high customer satisfiaction and their popularity.
 Howevwer, if they want to make their business better, I recommeend that commany considers the above findings.
"
"""