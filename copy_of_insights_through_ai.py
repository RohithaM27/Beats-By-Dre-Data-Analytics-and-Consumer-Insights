# -*- coding: utf-8 -*-
"""Copy of Insights through AI

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ACMuJaqbjbXTlAaBwSanfknzvsgnrxxK

## Importing Libraries
"""

import os

import google.generativeai as genai

"""## Model setup"""

# configure API Key
genai.configure(api_key="")

# Create the model
# See https://ai.google.dev/api/python/google/generativeai/GenerativeModel
generation_config = {
  "temperature": 1,
  "top_p": 0.95,
  "top_k": 64,
  "max_output_tokens": 8192,
  "response_mime_type": "text/plain",
}

model = genai.GenerativeModel(
  model_name="gemini-1.5-flash",
  generation_config=generation_config,
  # safety_settings = Adjust safety settings
  # See https://ai.google.dev/gemini-api/docs/safety-settings
)

"""## Start a chat session"""

chat_session = model.start_chat(
  history=[]
)

'''
    {
      "role": "user",
      "parts": [
        "You are a professional software developer with 20 years of coding experience.\n",
      ],
    }
'''
response = chat_session.send_message("Write about latest trends in AI")

print(response.text)

"""# Module 4: Insights Through AI

Welcome to Module 4! In this module, you'll explore how to leverage Gemini AI to extract meaningful insights from your data. This module aims to introduce you to the practical applications of advanced AI models, focusing on extracting and interpreting data insights.

### Learning Objectives:
- Understand the basics of Gemini AI and its applications in data analysis.
- Learn how large language models (LLMs) like Gemini AI work.
- Utilize Gemini AI to analyze and extract insights from your dataset.
- Interpret the results provided by Gemini AI and draw meaningful conclusions.

Let's get started!

## Section 1: Introduction to Gemini AI

### **What is Gemini AI?**

[Gemini AI](https://blog.google/technology/ai/google-gemini-ai/) is an advanced language model designed to understand and generate human-like text. It can analyze large volumes of text data, summarize information, and provide insightful responses based on the input it receives.

### Key Features and Capabilities:
- **Text Analysis:** Gemini AI can process and analyze text data to identify key themes, sentiments, and insights.
- **Summarization:** It can summarize long documents, making it easier to extract important information quickly.
- **Conversational Abilities:** Gemini AI can engage in human-like conversations, providing relevant and coherent responses.

## Section 2: Setting Up Gemini AI

Now to work with Gemini directly from Python, we need to use its API.

An API, or Application Programming Interface, is like a messenger that takes requests and tells a system what you want to do. Then it returns the system's response back to you. It's a way for different software programs to talk to each other.

### Simple Example:
Think of an API as a waiter in a restaurant. You (the user) tell the waiter (API) what you want from the menu (the system). The waiter takes your order to the kitchen (the system), and then brings your food (response) back to you.

### Step-by-Step Guide to Creating and Setting Up Your Gemini AI API Key:
1. Search for "Gemini AI API" on Google.
2. Select the official Gemini AI API page on ai.google.dev.
3. Navigate to the "Get API key in Google AI Studio" section.
4. Create a new project or select an existing project to generate an API key.
5. Copy the API key and ensure not to share it publicly for security reasons.

Once you have your API key, let's start coding our system.

## Simple Chatbot Setup using Python and Gemini API
"""

import google.generativeai as genai

# Function to set up a simple chatbot
def simple_chatbot(api_key, message):
    genai.configure(api_key=api_key)

    model = genai.GenerativeModel(
        model_name="gemini-1.5-flash",
        generation_config={
            "temperature": 1,
            "top_p": 0.95,
            "top_k": 64,
            "max_output_tokens": 8192,
            "response_mime_type": "text/plain",
        },
    )

    chat_session = model.start_chat(history=[])

    response = chat_session.send_message(message)
    return response.text

# Replace 'your_api_key' with the actual API key
api_key = ""

message = "Suggest some prompts to use to analyze and generate insights of consumer feedback on headphone products"
chatbot_response = simple_chatbot(api_key, message)
print(chatbot_response)

"""## Section 3: Integrating Gemini AI with Your Dataset

Now that you've set up the API and created a simple chatbot, let's move on to using Gemini AI with a dataset. We'll be working with a pandas DataFrame to send data to the API for analysis.
"""

import pandas as pd
import google.generativeai as genai

# Load your dataset
df = pd.read_csv('final_cleaned_reviews.csv')

# Replace 'your_api_key' with the actual API key
api_key = ""

# Function to analyze reviews using Gemini AI
def analyze_reviews(reviews, api_key,prompt_message):
    genai.configure(api_key=api_key)

    model = genai.GenerativeModel(
        model_name="gemini-1.5-flash",
        generation_config={
            "temperature": 1,
            "top_p": 0.95,
            "top_k": 64,
            "max_output_tokens": 8192,
            "response_mime_type": "text/plain",
        },
    )

    chat_session = model.start_chat(history=[])

    prompt = prompt_message + "\n\n".join(reviews)
    response = chat_session.send_message(prompt)
    return response.text

# Select a subset of reviews

reviews_column_name = 'content'
reviews = df[reviews_column_name].head(100).tolist()
# Send prompts
prompt_message = "Analyze the following reviews and summarize the key insights for headphones made by Beats brand from the content field"
insights = analyze_reviews(reviews, api_key, prompt_message)
print(insights)



"""## Section 4: Gathering Insights

Now that you've set up Gemini AI and integrated it with your dataset, it's time to dive into gathering insights. This section will guide you through developing effective prompts, extracting key information, and interpreting the results to gain meaningful insights.

### Developing Effective Prompts

Creating the right prompts is crucial for getting useful responses from Gemini AI. Here, we'll explore how to craft prompts that help extract specific information, such as pain points and positive aspects from customer reviews.

**Extracting Pain Points:** To identify common issues or complaints in customer reviews, you can create a prompt that specifically asks Gemini AI to summarize the negative aspects.
"""

# Unique Promp 1 : "Analyze the negative reviews and summarize the key pain points for headphones made by Beats brand from the content field"

# Select a subset of reviews

reviews_column_name = 'content'
reviews = df[reviews_column_name].head(100).tolist()
# Send prompts
prompt_message = "Analyze the negative reviews and summarize the key pain points for headphones made by Beats brand from the content field"
insights = analyze_reviews(reviews, api_key, prompt_message)
print(insights)

# Unique Promp 2 : "Analyze the following positive reviews and summarize the key positive aspects for headphones made by Beats brand from the content field"

# Select a subset of reviews

reviews_column_name = 'content'
reviews = df[reviews_column_name].head(100).tolist()
# Send prompts
prompt_message = "Analyze the following positive reviews and summarize the key positive aspects for headphones made by Beats brand from the content field"
insights = analyze_reviews(reviews, api_key, prompt_message)
print(insights)

# Unique prompt 3 : "What are customers' price sensitivities and budget expectations for headphones made by Beats brand?"
# Select a subset of reviews

reviews_column_name = 'content'
reviews = df[reviews_column_name].head(100).tolist()
# Send prompts
prompt_message = "What are customers' price sensitivities and budget expectations for headphones made by Beats brand?"
insights = analyze_reviews(reviews, api_key, prompt_message)
print(insights)

# Unique promp 4 : How do customers describe the comfort and fit of the headphones(e.g., pressure on ears, headband tightness) made by Beats brand?

# Select a subset of reviews

reviews_column_name = 'content'
reviews = df[reviews_column_name].head(100).tolist()
# Send prompts
prompt_message = "How do customers describe the comfort and fit of the headphones(e.g., pressure on ears, headband tightness) made by Beats brand?"
insights = analyze_reviews(reviews, api_key, prompt_message)
print(insights)

# Unique promp 5 : Based on the reviews, what are some potential areas for improvement in future product iterations?

# Select a subset of reviews

reviews_column_name = 'content'
reviews = df[reviews_column_name].head(100).tolist()
# Send prompts
prompt_message = "Based on the reviews in contents field, what are some potential areas for improvement in future product iterations considering Beats headphones?"
insights = analyze_reviews(reviews, api_key, prompt_message)
print(insights)

# Select a subset of reviews

reviews_column_name = 'content'
reviews = df[df['product_id'].isin(['B085296FLTA', 'B0CCZ26B5V', 'B0CBLM9MMC','B0C2D21HBX'])]['content'].tolist()
# Send prompts
prompt_message = "Based on the reviews in contents field, what are some potential areas for improvement in future products of Beats headphones after comparing it with its competitors?"
insights = analyze_reviews(reviews, api_key, prompt_message)
print(insights)

# Select a subset of reviews

reviews_column_name = 'content'
reviews = df[df['product_id'].isin(['B085296FLTA', 'B0CCZ26B5V', 'B0CBLM9MMC','B0C2D21HBX'])]['content'].tolist()
# Send prompts
prompt_message = "Based on the reviews in contents field, what are some potential areas for improvement in future products of Beats headphones after specifically compare it with its competitors for improvement?"
insights = analyze_reviews(reviews, api_key, prompt_message)
print(insights)

'''
**Noise Cancellation:**

* **Improved Effectiveness:** While Beats offer ANC, reviews suggest it's not as effective as competitors like Bose and Sony.  Beats should prioritize improving the ANC technology to provide a more immersive and quiet listening experience, especially in noisy environments like airplanes or crowded spaces.
* **More Modes:** Bose QuietComfort headphones offer multiple ANC modes to cater to different situations. Beats could benefit from offering similar modes, allowing users to customize the level of noise cancellation based on their environment.

**Comfort and Design:**

* **Improved Comfort:** Some reviewers have noted discomfort with the on-ear design of Beats Solo Pro, especially for longer periods.  Beats could experiment with different ear cup materials or designs for a more comfortable fit, taking inspiration from the soft, plush earcups often praised on Bose headphones.
* **Lighter Weight:**  While the Beats Solo Pro are praised for their build quality, their weight can be a factor for some users.  Beats could consider implementing lighter materials or designs to enhance comfort, especially for extended use.

**Functionality and Features:**

* **Multi-device Connectivity:**  Some reviewers mention the lack of multi-device connectivity on Beats headphones, a feature offered by competitors like Sony and Bose.  Offering seamless switching between multiple devices would be a significant improvement for users who frequently use headphones with different devices.
* **Transparency Mode:**  The transparency mode on Beats headphones could be improved for a more natural and less muffled listening experience.  Competitors like Apple AirPods Max and Sony WH-1000XM5 are praised for their transparency modes.
'''

# Select a subset of reviews

reviews_column_name = 'content'
reviews = df[df['product_id'].isin(['B085296FLTA', 'B0CCZ26B5V', 'B0CBLM9MMC','B0C2D21HBX', ' B0C24WC46M', 'B08PZHYWJS'])]['content'].tolist()
# Send prompts
prompt_message = "Based on the reviews in contents field, what are some potential areas for improvement in future products of Beats headphones, specifically compare its features with bose, apple airpods max, buedee, raycon, skullcandy for improvement?"
insights = analyze_reviews(reviews, api_key, prompt_message)
print(insights)

"""## Section 5: Hands-On Practice

Now that you know how to use the Gemini API to gather insights, feel free to experiment as much as possible. Remember: The goal is to understand the voice of the customer through their feedback. By developing effective prompts and interpreting the AI's responses, you can uncover valuable insights that drive better decision-making.
"""

